AWSTemplateFormatVersion: 2010-09-09
Description: Create EC2 instance for basic HTTP server
Parameters:
  KeyName:
    Description: EC2 keypair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceName:
    Description: Name of instance
    Type: String
    Default: http  
Mappings:
  AWSRegionAMIEC2:
    ap-southeast-1:
      Ubuntu: ami-04d9e855d716f9c99
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
            - NpmInstall
            - StartServer
        Install:
          packages:
            apt:
              - "nodejs"
              - "npm"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Join 
                - ''
                - - |
                    [Unit]
                  - |+
                    Description=cfn-hup daemon

                  - |
                    [Service]
                  - |
                    Type=simple
                  - |
                    ExecStart=/opt/aws/bin/cfn-hup
                  - |+
                    Restart=always

                  - |
                    [Install]
                  - WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root
            /home/ubuntu/app.js:
              content: !Join 
                - ''
                - - |
                    const express = require("express")
                    const bodyParser = require('body-parser')
                  - |+
                    require('console-stamp')(console, '[HH:MM:ss.l]');
                  - |+
                    const app = express()
                    const jsonParser = bodyParser.json()
                  - |+
                    module.exports = app
                  - |+
                    app.get("/", (req, res) => {
                      console.log("Got GET")
                      res.json({"result": "GET})
                    })
                  - |+
                    app.post("/", jsonParser, (req, res) => {
                      console.log("Got POST")
                      res.json({"result": "POST});
                    })
                  - |+

              mode: '000400'
              owner: ubuntu
              group: ubuntu
            /home/ubuntu/server.js:
              content: !Join 
                - ''
                - - |
                    const app = require("./app")
                    const port = 80
                  - |+
                    app.listen(port, () => console.log(`The server is listening on port ${port}`))
                  - |+

              mode: '000400'
              owner: ubuntu
              group: ubuntu
        Configure:
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        NpmInstall:
          commands:
            npm_packages:
              command: npm install -y -g express body-parser console-stamp forever
        StartServer:
           commands:
            forever_start:
              command: forever start /home/ubuntu/server.js        
    Properties:
      ImageId: !FindInMap 
        - AWSRegionAMIEC2
        - !Ref 'AWS::Region'
        - Ubuntu
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags: 
        - Key: "Name"
          Value: !Ref InstanceName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              apt-get update -y && apt-get install pip && pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
Outputs:
  WebsiteURL:
    Description: Web server URL
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
