AWSTemplateFormatVersion: 2010-09-09
Description: Create blog
Parameters:
  InstanceImage:
    Description: Instance image suitable for your AWS region
    Type: String
    Default: ami-0ba35dc9caf73d1c7
  KeyName:
    Description: EC2 keypair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceName:
    Description: Name of instance
    Type: String
    Default: blog
  GitRepository:
    Description: Repository with www files
    Type: String
  IPAddress:
    Description: Elastic IP address of this instance
    Type: String
  NodeSourceRepo:
    Description: Nodesource RPM location
    Type: String
    Default: https://rpm.nodesource.com/setup_16.x
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - NpmInstall
            - CheckoutGit
            - StartServer
        Install:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub | 
                [main]
                stack='${AWS::StackId}'
                region='${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource WebServerInstance --configsets InstallAndRun --region '${AWS::Region}'
                runas=root
              mode: '000400'
              owner: root
              group: root
            /home/ec2-user/app.js:
              content: |
                const express = require('express')
                const http = require('http')
                const https = require('https')
                const fs = require('fs')
                const path = require('path')

                httpApp = express(),
                app = express(),

                certPath = "cert";

                // Run to get the actual certs:
                // $ sudo certbot certonly --manual --domain 'arbatov.me' -m arbatovevgeny@gmail.com

                // var httpsOptions = {
                //     key: fs.readFileSync(path.join(certPath, "ssl.key")),
                //     cert: fs.readFileSync(path.join(certPath, "ssl.crt"))
                // };
                // httpApp.get("*", (req, res, next) => 
                //     res.redirect("https://" + req.headers.host + "/" + req.path)
                // );

                app.enable('trust proxy')
                app.use(express.static(
                    '/home/ec2-user/arbatov.me/_site', 
                    { dotfiles: 'allow' } 
                ))

                http.createServer(httpApp).listen(
                    80, 
                    () => console.log('Express HTTP server listening on port ' + httpApp.get('port'))
                )

                // https.createServer(httpApp).listen(
                //     443, 
                //     () => console.log('Express HTTP server listening on port ' + httpApp.get('port'))
                // )
              mode: '000644'
              owner: ec2-user
              group: ec2-user
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        NpmInstall:
          commands:
            forever_install:
              command: npm install -y -g forever
            npm_packages:
              command: npm install --prefix /home/ec2-user -y express
        CheckoutGit:
          commands:
            01_set_name:
              command: git config --global user.name '${GitName}'
            02_set_email:
              command: git config --global user.email '${GitEmail}'
            03_github_knonwn_hosts:
              command: ssh-keyscan github.com >> ~/.ssh/known_hosts
            04_checkout:
              command: cd /home/ec2-user/ && git clone '${GitRepository}'
        StartServer:
           commands:
            forever_start:
              command: forever start /home/ec2-user/app.js
    Properties:
      ImageId: !Ref InstanceImage
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags: 
        - Key: "Name"
          Value: !Ref InstanceName
      UserData: !Base64 
        Fn::Sub: |
          #!/bin/bash

          wget \
          -r \
          --no-parent \
          -A 'epel-release-*.rpm' \
          https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/

          rpm \
          -Uvh \
          dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm
          
          yum-config-manager \
          --enable epel*

          yum update -y
          yum update -y aws-cfn-bootstrap
          yum install -y git 

          amazon-linux-extras install epel -y
          yum install -y certbot
          certbot --non-interactive --agree-tos -m arbatovevgeny@gmail.com

          curl -sL '${NodeSourceRepo}' | sudo bash -
          yum install -y nodejs

          echo '39      1,13    *       *       *       root    certbot renew --no-self-upgrade' | crontab

          /opt/aws/bin/cfn-init -v \
            --stack '${AWS::StackName}' \
            --resource WebServerInstance \
            --configsets InstallAndRun \
            --region '${AWS::Region}'
          
          /opt/aws/bin/cfn-signal -e $? \
            --stack  '${AWS::StackName}' \
            --resource WebServerInstance \
            --region '${AWS::Region}'
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP(S) and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'WebServerInstance'
      EIP: !Ref 'IPAddress'
Outputs:
  DNS:
    Description: DNS name
    Value: !GetAtt 
      - WebServerInstance
      - PublicDnsName
